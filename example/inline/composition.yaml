apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: function-pkl
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
  - step: run-the-template
    functionRef:
      name: function-pkl
    input:
      apiVersion: template.fn.crossplane.io/v1beta1
      kind: Pkl
      spec:
        pklCRDs:
          - apiVersion: example.crossplane.io/v1
            kind: XR
            uri: package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane-example@0.0.9#/crds/XR.pkl
        pklComposition:
          name: XR
          type: inline
          inline: |
            amends "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CrossplaneResource.pkl"
            import "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CompositionInput.pkl"

            import "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane-example@0.0.9#/crds/XR.pkl"
            import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"

            local state = import("crossplane:state") as CompositionInput
            local observedCompositeResource: XR = state.observed.composite.resource as XR
            local cmOne: ConfigMap? = state.observed.resources.getOrNull("cm-one")?.resource as ConfigMap?

            resource = (observedCompositeResource) {
              status {
                when (cmOne?.metadata?.namespace != null) {
                  someStatus = "I observed cm-one's namespace. it is \(cmOne.metadata.namespace)"
                }
              }
            }
            connectionDetails {
              ["test"] = "bar"
            }

        pklManifests:
          - name: cm-one
            type: inline
            inline: |
              amends "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CrossplaneResource.pkl"
              import "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CompositionInput.pkl"

              import "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane-example@0.0.9#/crds/XR.pkl"
              import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"

              local state = import("crossplane:state") as CompositionInput
              local observedCompositeResource: XR = state.observed.composite.resource as XR

              resource = (ConfigMap) {
                metadata {
                  name = "cm-one"
                  namespace = "crossplane-system"
                }

                data {
                  ["foo"] = observedCompositeResource.metadata.name ?? throw("Composite could not find observed composite name")
                }
              }
              ready = Ready_READY_FALSE
          - name: cm-two
            type: inline
            inline: |
              amends "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CrossplaneResource.pkl"
              import "package://pkg.pkl-lang.org/github.com/avarei/function-pkl/crossplane@0.0.11#/CompositionInput.pkl"

              import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"

              local state = import("crossplane:state") as CompositionInput
              local foo: ConfigMap? = state.observed.resources.getOrNull("cm-one")?.resource as ConfigMap?

              resource = (ConfigMap) {
                metadata {
                  name = "cm-two"
                  namespace = "crossplane-system"
                }

                data {
                  ["bar"] = foo?.metadata?.name ?? "alternative"
                }
              }
              ready = Ready_READY_FALSE
