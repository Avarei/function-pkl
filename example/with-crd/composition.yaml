apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: function-pkl
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1
    kind: XR
  mode: Pipeline
  pipeline:
  - step: run-the-template
    functionRef:
      name: function-pkl
    input:
      apiVersion: template.fn.crossplane.io/v1beta1
      kind: Pkl
      spec:
        pklCRDs:
          - apiVersion: example.crossplane.io/v1
            kind: XR
            uri: https://raw.githubusercontent.com/Avarei/function-pkl/test/full-functioninput-parse/pkl/crds/XR.pkl

        pklManifests:
          - name: cm-one
            type: inline
            inline: |
              amends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"

              import "https://raw.githubusercontent.com/Avarei/function-pkl/test/full-functioninput-parse/pkl/CompositionInput.pkl" // TODO replace with package reference
              import "https://raw.githubusercontent.com/Avarei/function-pkl/test/full-functioninput-parse/pkl/crds/XR.pkl" // TODO replace with package reference

              local state = import("crossplane:state") as CompositionInput
              local observedCompositeResource: XR = state.observed.composite.resource as XR
              metadata {
                name = "cm-one"
                namespace = "crossplane-system"
              }

              data {
                ["foo"] = observedCompositeResource.metadata.name ?? throw("Composite could not find observed composite name")
              }
          - name: cm-two
            type: inline
            inline: |
              amends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"
              import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ConfigMap.pkl"
              import "https://raw.githubusercontent.com/Avarei/function-pkl/test/full-functioninput-parse/pkl/CompositionInput.pkl" // TODO replace with package reference
              
              local state = import("crossplane:state") as CompositionInput
              local foo: ConfigMap? = state.observed.resources.getOrNull("cm-one")?.resource as ConfigMap?
              metadata {
                name = "cm-two"
                namespace = "crossplane-system"
              }

              data {
                ["bar"] = foo?.metadata?.name ?? throw("The ConfigMap cm-one is not yet in observed state")
              }
