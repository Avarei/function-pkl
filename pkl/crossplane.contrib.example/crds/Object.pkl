/// A Object is an provider Kubernetes API type
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/crossplane-contrib/provider-kubernetes/main/package/crds/kubernetes.crossplane.io_objects.yaml>.
module io.crossplane.kubernetes.v1alpha2.Object

extends "@k8s/K8sResource.pkl"

import "@k8s/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"
import "@k8s/K8sResource.pkl"

fixed apiVersion: "kubernetes.crossplane.io/v1alpha2"

fixed kind: "Object"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// A ObjectSpec defines the desired state of a Object.
spec: Spec

/// A ObjectStatus represents the observed state of a Object.
status: Status?

/// A ObjectSpec defines the desired state of a Object.
class Spec {
  connectionDetails: Listing<ConnectionDetail>?

  /// DeletionPolicy specifies what will happen to the underlying external when this managed resource is
  /// deleted - either "Delete" or "Orphan" the external resource. This field is planned to be deprecated
  /// in favor of the ManagementPolicies field in a future release. Currently, both could be set
  /// independently and non-default values would be honored if the feature flag is enabled. See the
  /// design doc for more information:
  /// https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
  ///
  /// Default if undefined: `"Delete"`
  deletionPolicy: ("Orphan"|"Delete")?

  /// ObjectParameters are the configurable fields of a Object.
  forProvider: ForProvider

  /// THIS IS A BETA FIELD. It is on by default but can be opted out through a Crossplane feature flag.
  /// ManagementPolicies specify the array of actions Crossplane is allowed to take on the managed and
  /// external resources. This field is planned to replace the DeletionPolicy field in a future release.
  /// Currently, both could be set independently and non-default values would be honored if the feature
  /// flag is enabled. If both are custom, the DeletionPolicy field will be ignored. See the design doc
  /// for more information:
  /// https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
  /// and this one:
  /// https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
  ///
  /// Default if undefined: `{ "*" }`
  managementPolicies: Listing<"Observe"|"Create"|"Update"|"Delete"|"LateInitialize"|"*">?

  /// ProviderConfigReference specifies how the provider that will be used to create, observe, update,
  /// and delete this managed resource should be configured.
  ///
  /// Default if undefined: `{ ["name"] = "default" }`
  providerConfigRef: ProviderConfigRef?

  /// PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata
  /// and a reference to secret store config to which any connection details for this managed resource
  /// should be written. Connection details frequently include the endpoint, username, and password
  /// required to connect to the managed resource.
  publishConnectionDetailsTo: PublishConnectionDetailsTo?

  /// Readiness defines how the object's readiness condition should be computed, if not specified it will
  /// be considered ready as soon as the underlying external resource is considered up-to-date.
  readiness: Readiness?

  references: Listing<Reference>?

  /// Watch enables watching the referenced or managed kubernetes resources.
  ///
  /// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored unless "watches" feature
  /// gate is enabled, and may be changed or removed without notice.
  ///
  /// Default if undefined: `false`
  watch: Boolean?

  /// WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any
  /// connection details for this managed resource should be written. Connection details frequently
  /// include the endpoint, username, and password required to connect to the managed resource. This
  /// field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo.
  /// Currently, both could be set independently and connection details would be published to both
  /// without affecting each other.
  writeConnectionSecretToRef: WriteConnectionSecretToRef?
}

/// ConnectionDetail represents an entry in the connection secret for an Object
class ConnectionDetail {
  /// API version of the referent.
  apiVersion: String?

  /// If referring to a piece of an object instead of an entire object, this string should contain a
  /// valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if
  /// the object reference is to a container within a pod, this would take on a value like:
  /// "spec.containers{name}" (where "name" refers to the name of the container that triggered the event)
  /// or if no container name is specified "spec.containers[2]" (container with index 2 in this pod).
  /// This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO:
  /// this design is not final and this field is subject to change in the future.
  fieldPath: String?

  /// Kind of the referent. More info:
  /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
  kind: String?

  /// Name of the referent. More info:
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
  name: String?

  /// Namespace of the referent. More info:
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  namespace: String?

  /// Specific resourceVersion to which this reference is made, if any. More info:
  /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
  resourceVersion: String?

  toConnectionSecretKey: String?

  /// UID of the referent. More info:
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
  uid: String?
}

/// ObjectParameters are the configurable fields of a Object.
class ForProvider {
  /// Raw JSON representation of the kubernetes object to be created.
  manifest: K8sResource
}

/// ProviderConfigReference specifies how the provider that will be used to create, observe, update, and
/// delete this managed resource should be configured.
///
/// Default if undefined: `{ ["name"] = "default" }`
class ProviderConfigRef {
  /// Name of the referenced object.
  name: String

  /// Policies for referencing.
  policy: Policy?
}

/// Policies for referencing.
class Policy {
  /// Resolution specifies whether resolution of this reference is required. The default is 'Required',
  /// which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this
  /// reference will be a no-op if it cannot be resolved.
  ///
  /// Default if undefined: `"Required"`
  resolution: ("Required"|"Optional")?

  /// Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will
  /// attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to
  /// resolve the reference on every reconcile.
  resolve: ("Always"|"IfNotPresent")?
}

/// PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and
/// a reference to secret store config to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username, and password required to
/// connect to the managed resource.
class PublishConnectionDetailsTo {
  /// SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
  ///
  /// Default if undefined: `{ ["name"] = "default" }`
  configRef: ConfigRef?

  /// Metadata is the metadata for connection secret.
  metadata: Metadata?

  /// Name is the name of the connection secret.
  name: String
}

/// SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret.
///
/// Default if undefined: `{ ["name"] = "default" }`
class ConfigRef {
  /// Name of the referenced object.
  name: String

  /// Policies for referencing.
  policy: Policy?
}

/// Metadata is the metadata for connection secret.
class Metadata {
  /// Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this
  /// will be used as "metadata.annotations". - It is up to Secret Store implementation for others store
  /// types.
  annotations: Mapping<String, String>?

  /// Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be
  /// used as "metadata.labels". - It is up to Secret Store implementation for others store types.
  labels: Mapping<String, String>?

  /// Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores.
  type: String?
}

/// Readiness defines how the object's readiness condition should be computed, if not specified it will
/// be considered ready as soon as the underlying external resource is considered up-to-date.
class Readiness {
  /// CelQuery defines a cel query to evaluate the readiness. The observed object is passed to the cel
  /// query with the word `object`. Cel macros are available to be used, see
  /// https://github.com/google/cel-spec/blob/master/doc/langdef.md#macros for more information.
  /// Examples: `object.status.isReady == true`: checks for a boolean field called isReady on status.
  /// `object.status.conditions.all(x, x.status == "True")` mimics the behavior of the AllTrue readiness
  /// policy `object.status.conditions.exists(c, c.type == "condition1" && c.status == "True" )` checks
  /// just one condition
  celQuery: String?

  /// Policy defines how the Object's readiness condition should be computed.
  ///
  /// Default if undefined: `"SuccessfulCreate"`
  policy: ("SuccessfulCreate"|"DeriveFromObject"|"AllTrue"|"DeriveFromCelQuery")?
}

/// Reference refers to an Object or arbitrary Kubernetes resource and optionally patch values from that
/// resource to the current Object.
class Reference {
  /// DependsOn is used to declare dependency on other Object or arbitrary Kubernetes resource.
  dependsOn: DependsOn?

  /// PatchesFrom is used to declare dependency on other Object or arbitrary Kubernetes resource, and
  /// also patch fields from this object.
  patchesFrom: PatchesFrom?

  /// ToFieldPath is the path of the field on the resource whose value will be changed with the result of
  /// transforms. Leave empty if you'd like to propagate to the same path as patchesFrom.fieldPath.
  toFieldPath: String?
}

/// DependsOn is used to declare dependency on other Object or arbitrary Kubernetes resource.
class DependsOn {
  /// APIVersion of the referenced object.
  ///
  /// Default if undefined: `"kubernetes.crossplane.io/v1alpha1"`
  apiVersion: String?

  /// Kind of the referenced object.
  ///
  /// Default if undefined: `"Object"`
  kind: String?

  /// Name of the referenced object.
  name: String

  /// Namespace of the referenced object.
  namespace: String?
}

/// PatchesFrom is used to declare dependency on other Object or arbitrary Kubernetes resource, and also
/// patch fields from this object.
class PatchesFrom {
  /// APIVersion of the referenced object.
  ///
  /// Default if undefined: `"kubernetes.crossplane.io/v1alpha1"`
  apiVersion: String?

  /// FieldPath is the path of the field on the resource whose value is to be used as input.
  fieldPath: String

  /// Kind of the referenced object.
  ///
  /// Default if undefined: `"Object"`
  kind: String?

  /// Name of the referenced object.
  name: String

  /// Namespace of the referenced object.
  namespace: String?
}

/// WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection
/// details for this managed resource should be written. Connection details frequently include the
/// endpoint, username, and password required to connect to the managed resource. This field is planned
/// to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be
/// set independently and connection details would be published to both without affecting each other.
class WriteConnectionSecretToRef {
  /// Name of the secret.
  name: String

  /// Namespace of the secret.
  namespace: String
}

/// A ObjectStatus represents the observed state of a Object.
class Status {
  /// ObjectObservation are the observable fields of a Object.
  atProvider: AtProvider?

  /// Conditions of the resource.
  conditions: Listing<Condition>?

  /// ObservedGeneration is the latest metadata.generation which resulted in either a ready state, or
  /// stalled due to error it can not recover from without human intervention.
  observedGeneration: Int?
}

/// ObjectObservation are the observable fields of a Object.
class AtProvider {
  /// Raw JSON representation of the remote object.
  manifest: K8sResource?
}

/// A Condition that may apply to a resource.
class Condition {
  /// LastTransitionTime is the last time this condition transitioned from one status to another.
  lastTransitionTime: String

  /// A Message containing details about this condition's last transition from one status to another, if
  /// any.
  message: String?

  /// ObservedGeneration represents the .metadata.generation that the condition was set based upon. For
  /// instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
  /// is 9, the condition is out of date with respect to the current state of the instance.
  observedGeneration: Int?

  /// A Reason for this condition's last transition from one status to another.
  reason: String

  /// Status of this condition; is it currently True, False, or Unknown?
  status: String

  /// Type of this condition. At most one of each condition type may apply to a resource at any point in
  /// time.
  type: String
}
