@ModuleInfo { minPklVersion = "0.25.1" }
module CompositionRequest

import "RunFunction.pkl"

/// Metadata pertaining to this request.
meta: RunFunction.RequestMeta?

/// The observed state prior to invocation of a Function pipeline. State passed
/// to each Function is fresh as of the time the pipeline was invoked, not as
/// of the time each Function was invoked.
observed: RunFunction.State?

/// Desired state according to a Function pipeline. The state passed to a
/// particular Function may have been accumulated by previous Functions in the
/// pipeline.
///
/// Note that the desired state must be a partial object with only the fields
/// that this function (and its predecessors in the pipeline) wants to have
/// set in the object. Copying a non-partial observed state to desired is most
/// likely not what you want to do. Leaving out fields that had been returned
/// as desired before will result in them being deleted from the objects in the
/// cluster.
desired: RunFunction.State?

/// Optional input specific to this Function invocation. A JSON representation
/// of the 'input' block of the relevant entry in a Composition's pipeline.
input: Mapping<String, Any>?

/// Optional context. Crossplane may pass arbitary contextual information to a
/// Function. A Function may also return context in its RunFunctionResponse,
/// and that context will be passed to subsequent Functions. Crossplane
/// discards all context returned by the last Function in the pipeline.
context: Mapping<String, Any>?

/// Optional extra resources that the Function required.
/// Note that extra resources is a map to Resources, plural.
/// The map key corresponds to the key in a RunFunctionResponse's
/// extra_resources field. If a Function requested extra resources that
/// did not exist, Crossplane sets the map key to an empty Resources message to
/// indicate that it attempted to satisfy the request.
extraResources: Mapping<String, RunFunction.Resources?>

/// Helper function to Retrieve extraResources that have been requested under a given `name`.
function getExtraResources(name: String): Listing<RunFunction.Resource> =
  let (listingWithNil = extraResources.getOrNull(name).ifNonNull((it: RunFunction.Resources) -> it.items) ?? new Listing<RunFunction.Resource?> {})
    listingWithNil.toList().filter((n) -> n != null).toListing() as Listing<RunFunction.Resource>

/// Helper function to Retrieve a specific resource from extraResources.
function getExtraResource(name: String, index: Int): RunFunction.Resource? =
    getExtraResources(name).toList().getOrNull(index)
