@ModuleInfo { minPklVersion = "0.25.1" }
module RunFunction

import "@k8s/K8sResource.pkl"

/// State of the composite resource (XR) and any composed resources.
class State {
  /// The state of the composite resource (XR).
  composite: Resource

  /// The state of any composed resources.
  resources: Mapping<String, Resource>
}

/// RequestMeta contains metadata pertaining to a RunFunctionRequest.
class RequestMeta {
  tag: String
}

/// Resources represents the state of several Crossplane resources.
class Resources {
  items: Listing<Resource?>
}

/// A Resource represents the state of a composite or composed resource.
class Resource {
  /// The JSON representation of the resource.
  ///
  ///   - Crossplane will set this field in a RunFunctionRequest to the entire
  ///     observed state of a resource - including its metadata, spec, and status.
  ///
  ///   - A Function should set this field in a RunFunctionRequest to communicate
  ///     the desired state of a composite or composed resource.
  ///
  ///   - A Function may only specify the desired status of a composite resource -
  ///     not its metadata or spec. A Function should not return desired metadata
  ///     or spec for a composite resource. This will be ignored.
  ///
  ///   - A Function may not specify the desired status of a composed resource -
  ///     only its metadata and spec. A Function should not return desired status
  ///     for a composed resource. This will be ignored.
  resource: K8sResource?

  /// Ready indicates whether the resource should be considered ready.
  ///
  /// * Crossplane will never set this field in a RunFunctionRequest.
  ///
  ///   - A Function should set this field to READY_TRUE in a RunFunctionResponse
  ///     to indicate that a desired composed resource is ready.
  ///
  ///   - A Function should not set this field in a RunFunctionResponse to indicate
  ///     that the desired composite resource is ready. This will be ignored.
  ready: Ready? = READY_UNSPECIFIED

  hidden const READY_UNSPECIFIED: Ready = 0
  hidden const READY_TRUE: Ready = 1
  hidden const READY_FALSE: Ready = 2

  /// The resource's connection details.
  ///
  ///   - Crossplane will set this field in a RunFunctionRequest to communicate the
  ///     the observed connection details of a composite or composed resource.
  ///
  ///   - A Function should set this field in a RunFunctionResponse to indicate the
  ///     desired connection details of the composite resource.
  ///
  ///   - A Function should not set this field in a RunFunctionResponse to indicate
  ///     the desired connection details of a composed resource. This will be
  ///     ignored.
  connectionDetails: Mapping<String, String>?
}
typealias Ready = Int(isBetween(0,2))

/// ResponseMeta contains metadata pertaining to a RunFunctionResponse.
class ResponseMeta {
  /// Time-to-live of this response. Deterministic Functions with no side-effects
  /// (e.g. simple templating Functions) may specify a TTL. Crossplane may choose
  /// to cache responses until the TTL expires.
  ttl: Duration
}

/// A Result of running a Function.
class Result {
  /// Severity of this result.
  severity: Severity = SEVERITY_UNSPECIFIED

  /// Human-readable details about the result.
  message: String

  hidden const SEVERITY_UNSPECIFIED: Severity = 0
  hidden const SEVERITY_FATAL: Severity = 1
  hidden const SEVERITY_WARNING: Severity = 2
  hidden const SEVERITY_NORMAL: Severity = 3
}
typealias Severity = Int(isBetween(0,3))

/// Requirements that must be satisfied for a Function to run successfully.
class Requirements {

  /// Extra resources that this Function requires.
  /// The map key uniquely identifies the group of resources.
  extraResources: Mapping<String, ResourceSelector?>
}

/// ResourceSelector selects a group of resources, either by name or by label.
class ResourceSelector {
  apiVersion: String
  kind: String
  match: Match
}

class Match {
  /// Match the resource with this name.
  /// Note: matchLabels takes precedence if both are defined.
  matchName: String?
  /// Match all resources with these labels.
  matchLabels: MatchLabels?
}

/// MatchLabels defines a set of labels to match resources against.
class MatchLabels {
  labels: Mapping<String, String>
}
